/**
 * Copyright (C) 2019, Jeremy Retailleau
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * Adapted from:
 *
 * Jorge Jimenez et al. (2013). Enhanced Subpixel Morphological Antialiasing.
 * http://www.iryoku.com/smaa/
 */

kernel SMAANeighborhood : ImageComputationKernel<ePixelWise>
{
    Image<eRead, eAccessRandom, eEdgeClamped> input;
    Image<eRead, eAccessRandom, eEdgeClamped> blend_tex;
    Image<eWrite, eAccessPoint> output;

    /**
     * Apply blending to neighborhood pixels.
     *
     * @param pos Current image position.
     */
    void process(int2 pos) {
        float4 in_blend = blend_tex(pos.x, pos.y);

        // Fetch the blending weights for current pixel:
        float4 a(
            blend_tex(pos.x + 1, pos.y, 3),
            blend_tex(pos.x, pos.y + 1, 1),
            in_blend[2],
            in_blend[0]
        );

        float4 color;

        if (dot(a, float4(1.0, 1.0, 1.0, 1.0)) < 0.01f) {
            color = input(pos.x, pos.y);
        }
        else {
            bool h = max(a[0], a[2]) > max(a[1], a[3]);

            float4 blending_offset(0.0f, a[1], 0.0f, a[3]);
            float2 blending_weight(a[1], a[3]);

            if (h) {
                blending_offset = float4(a[0], 0.0f, a[2], 0.0f);
                blending_weight = float2(a[0], a[2]);
            }

            blending_weight /= dot(blending_weight, float2(1.0f, 1.0f));

            float4 coord(
                pos.x + blending_offset[0],
                pos.y + blending_offset[1],
                pos.x - blending_offset[2],
                pos.y - blending_offset[3]
            );

            color = blending_weight[0] * bilinear(input, coord[0], coord[1]);
            color += blending_weight[1] * bilinear(input, coord[2], coord[3]);
        }

        output() = color;
    }
};
